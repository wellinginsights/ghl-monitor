name: Check GHL Account Status (Deep Dive)

on:
  schedule:
    - cron: '0 12 * * *' # Run this workflow every day at 12:00 PM UTC
  workflow_dispatch: # Allows you to run this workflow manually

jobs:
  check-and-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run GHL Deep Dive Script
        shell: python
        env:
          GHL_API_KEY: ${{ secrets.GHL_API_KEY }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        run: |
          import os
          import requests
          import json
          import time

          # --- Get Secrets ---
          ghl_key = os.getenv('GHL_API_KEY')
          sendgrid_key = os.getenv('SENDGRID_API_KEY')
          to_email = os.getenv('TO_EMAIL')
          from_email = os.getenv('FROM_EMAIL')

          # --- API Configuration ---
          ghl_headers = {
              "Authorization": f"Bearer {ghl_key}"
          }

          # --- Step 1: Get all Location IDs ---
          list_locations_url = "https://rest.gohighlevel.com/v1/locations/"
          print("Fetching all location IDs...")
          
          try:
              list_response = requests.get(list_locations_url, headers=ghl_headers, timeout=30)
              list_response.raise_for_status() # Raises an error for bad responses (4xx or 5xx)
              all_locations = list_response.json().get('locations', [])
              print(f"Found {len(all_locations)} total locations.")
          except requests.exceptions.RequestException as e:
              print(f"Error fetching GHL location list: {e}")
              exit(1)

          # --- Step 2: Loop and "Drill Into" Each Location ---
          suspended_accounts = []
          if not all_locations:
              print("No locations found to check.")
          else:
              for location in all_locations:
                  location_id = location.get('id')
                  location_name = location.get('name', 'N/A')
                  
                  if not location_id:
                      continue

                  # This is the "deep dive" API call for a single location
                  single_location_url = f"https://rest.gohighlevel.com/v1/locations/{location_id}"
                  
                  try:
                      print(f"  -> Drilling into: {location_name} ({location_id})")
                      detail_response = requests.get(single_location_url, headers=ghl_headers, timeout=15)
                      detail_response.raise_for_status()
                      
                      location_details = detail_response.json()
                      status = location_details.get('status', 'NOT FOUND')
                      
                      print(f"     Status found: {status}")

                      # Check for various forms of non-active status
                      if status and status.lower() in ['suspended', 'inactive', 'cancelled']:
                          suspended_accounts.append(f"{location_name} (Status: {status})")

                  except requests.exceptions.RequestException as e:
                      print(f"     Could not get details for {location_name}: {e}")

                  time.sleep(0.5) # Add a small delay to be respectful of the API rate limits

          # --- Step 3: Send Email if Necessary ---
          if not suspended_accounts:
              print("\nNo suspended accounts to report. Exiting.")
              exit(0)
          
          print(f"\nFound {len(suspended_accounts)} suspended/inactive accounts. Preparing to send email...")
          
          email_subject = "Alert: Suspended GHL Accounts Detected"
          
          email_body = "The following GoHighLevel accounts have a non-active status:\n\n"
          for account_info in suspended_accounts:
              email_body += f"- {account_info}\n"
          
          sendgrid_url = "https://api.sendgrid.com/v3/mail/send"
          sendgrid_headers = {
              "Authorization": f"Bearer {sendgrid_key}",
              "Content-Type": "application/json"
          }
          email_payload = {
              "personalizations": [{"to": [{"email": to_email}]}],
              "from": {"email": from_email},
              "subject": email_subject,
              "content": [{"type": "text/plain", "value": email_body}]
          }
          
          email_response = requests.post(sendgrid_url, headers=sendgrid_headers, data=json.dumps(email_payload))
          
          if email_response.status_code == 202:
              print("Email alert sent successfully!")
          else:
              print(f"Error sending email: {email_response.status_code}")
              print(email_response.text)
              exit(1)
