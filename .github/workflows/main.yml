name: Check GHL Account Status

# Run this workflow every day at 12:00 PM UTC
on:
  schedule:
    - cron: '0 12 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  check-and-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run GHL Check Script
        shell: python  # <-- ADD THIS LINE
        env:
          GHL_API_KEY: ${{ secrets.GHL_API_KEY }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        run: |
          import os
          import requests
          import json

          # --- 1. Get GHL Location Data ---
          ghl_key = os.getenv('GHL_API_KEY')
          ghl_url = "https://rest.gohighlevel.com/v1/locations/"
          ghl_headers = {
              "Authorization": f"Bearer {ghl_key}"
          }
          
          print("Fetching GHL locations...")
          response = requests.get(ghl_url, headers=ghl_headers)
          
          if response.status_code != 200:
              print(f"Error fetching GHL data: {response.status_code}")
              print(response.text)
              exit(1)
              
          locations = response.json().get('locations', [])
          print(f"Found {len(locations)} total locations.")

          # --- 2. Find Suspended Accounts ---
          suspended_accounts = []
          for location in locations:
              # IMPORTANT: Check for the 'status' field
              if location.get('status') == 'suspended':
                  suspended_accounts.append(location.get('name', 'N/A'))
          
          print(f"Found {len(suspended_accounts)} suspended accounts.")

          # --- 3. Send Email if Necessary ---
          if not suspended_accounts:
              print("No suspended accounts found. Exiting.")
              exit(0)
          
          print("Suspended accounts found. Preparing to send email via SendGrid...")
          
          sendgrid_key = os.getenv('SENDGRID_API_KEY')
          to_email = os.getenv('TO_EMAIL')
          from_email = os.getenv('FROM_EMAIL')
          
          email_subject = "Alert: Suspended GHL Accounts Detected"
          
          email_body = "The following GoHighLevel accounts are currently suspended:\n\n"
          for account in suspended_accounts:
              email_body += f"- {account}\n"
          
          sendgrid_url = "https://api.sendgrid.com/v3/mail/send"
          sendgrid_headers = {
              "Authorization": f"Bearer {sendgrid_key}",
              "Content-Type": "application/json"
          }
          email_payload = {
              "personalizations": [{"to": [{"email": to_email}]}],
              "from": {"email": from_email},
              "subject": email_subject,
              "content": [{"type": "text/plain", "value": email_body}]
          }
          
          email_response = requests.post(sendgrid_url, headers=sendgrid_headers, data=json.dumps(email_payload))
          
          if email_response.status_code == 202:
              print("Email alert sent successfully!")
          else:
              print(f"Error sending email: {email_response.status_code}")
              print(email_response.text)
              exit(1)
